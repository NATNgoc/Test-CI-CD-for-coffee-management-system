name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    env:
      Test_Data_SQL_Path: ../QuanLyQuanCafe/dataFake

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ''
        ports:
          - 1433:1433
        options: --health-cmd="sqlcmd -U sa -Q 'SELECT 1'" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install SQLCMD
      run: |
        sudo apt-get update
        sudo apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    - name: Create DB
      run: |
        sqlcmd -S localhost,1433 -U sa -Q "CREATE DATABASE QuanLyQuanCafe"
        sqlcmd -S localhost,1433 -U sa -Q "RESTORE DATABASE QuanLyQuanCafe FROM DISK = '${{ env.Test_Data_SQL_Path }}' WITH MOVE 'YourMDFLogicalName' TO '/var/opt/mssql/data/QuanLyQuanCafe.mdf', MOVE 'YourLDFLogicalName' TO '/var/opt/mssql/data/QuanLyQuanCafe_Log.ldf'"

    # The rest of your steps...
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: dotnet build $env:Wap_Project_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: rm -f $env:Wap_Project_Directory/GitHubActionsWorkflow.pfx
    
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}/AppPackages
